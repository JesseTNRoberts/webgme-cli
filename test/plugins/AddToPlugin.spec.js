/*jshint node:true, mocha:true*/
/**
 * Generated by PluginGenerator from webgme on Wed Aug 19 2015 15:04:06 GMT-0500 (Central Daylight Time).
 */

'use strict';
var testFixture = require('../res/globals');

describe('AddToPlugin', function () {
    var Q = require('q'),
        gmeConfig = testFixture.getGmeConfig(),
        expect = testFixture.expect,
        logger = testFixture.logger.fork('AddToPlugin'),
        PluginCliManager = testFixture.WebGME.PluginCliManager,
        projectName = 'testProject',
        pluginName = 'AddToPlugin',
        Core = testFixture.requirejs('common/core/core'),
        assert = require('assert'),
        project,
        gmeAuth,
        storage,
        commitHash;

    before(function (done) {
        testFixture.clearDBAndGetGMEAuth(gmeConfig, projectName)
            .then(function (gmeAuth_) {
                gmeAuth = gmeAuth_;
                // This uses in memory storage. Use testFixture.getMongoStorage to persist test to database.
                storage = testFixture.getMemoryStorage(logger, gmeConfig, gmeAuth);
                return storage.openDatabase();
            })
            .then(function () {
                console.log('testFixture.path:',testFixture.path);
                var importParam = {
                    projectSeed: testFixture.path.join(testFixture.SEED_DIR, 'EmptyProject.json'),
                    projectName: projectName,
                    branchName: 'master',
                    logger: logger,
                    gmeConfig: gmeConfig
                };

                return testFixture.importProject(storage, importParam);
            })
            .then(function (importResult) {
                project = importResult.project;
                commitHash = importResult.commitHash;
                return project.createBranch('test', commitHash);
            })
            .nodeify(done);
    });

    after(function (done) {
        storage.closeDatabase()
            .then(function () {
                return gmeAuth.unload();
            })
            .nodeify(done);
    });

    it('should run plugin and update the branch', function (done) {
        var manager = new PluginCliManager(null, logger, gmeConfig),
            pluginConfig = {
                field: 'validPlugins',
                attribute: 'testPlugin'
            },
            context = {
                project: project,
                commitHash: commitHash,
                branchName: 'test',
                activeNode: '/960660211',
                core: null
            };

        console.log('Plugin run started');
        manager.executePlugin(pluginName, pluginConfig, context, function (err, pluginResult) {
            console.log('Plugin run finished');
            expect(err).to.equal(null);
            expect(typeof pluginResult).to.equal('object');
            expect(pluginResult.success).to.equal(true);

            context.core = new Core(project, {globConf: gmeConfig, logger: logger});

            context.project.getBranchHash(context.branchName)
                .then(function (commitHash) {
                    context.commitHash = context.commitHash || commitHash;
                    return Q.ninvoke(context.project, 'loadObject', context.commitHash);
                })
                .then(function (commitObject) {
                    var rootDeferred = Q.defer();
                    logger.debug('commitObject loaded', {metadata: commitObject});
                    context.core.loadRoot(commitObject.root, function (err, rootNode) {
                        if (err) {
                            rootDeferred.reject(err);
                        } else {
                            logger.debug('rootNode loaded');
                            rootDeferred.resolve(rootNode);
                        }
                    });

                    return rootDeferred.promise;
                })
                .then(function (rootNode) {
                    // Check that 'testPlugin' has been added to 'validPlugins' 
                    // on the root node
                    console.log('getting', pluginConfig.field);
                    var attributes = context.core.getRegistry(rootNode, pluginConfig.field),
                        attributeList = attributes.split(' ');

                    console.log('attributes: "'+ attributes+'"');
                    console.log('checking for', pluginConfig.attribute);
                    console.log('children', context.core.getChildrenPaths(rootNode));
                    assert.notEqual(attributeList.indexOf(pluginConfig.attribute), -1);
                })
                .nodeify(done);

        });
    });
});
